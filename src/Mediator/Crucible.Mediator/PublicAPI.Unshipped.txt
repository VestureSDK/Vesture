#nullable enable
abstract Crucible.Mediator.Invocation.InvocationContext.RequestType.get -> System.Type!
abstract Crucible.Mediator.Invocation.InvocationContext.ResponseType.get -> System.Type!
abstract Crucible.Mediator.Invocation.InvocationMiddlewareWrapper.ExecuteAsync(Crucible.Mediator.Invocation.IInvocationContext! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
abstract Crucible.Mediator.Invocation.InvocationMiddlewareWrapper.IsApplicable(System.Type! contextType) -> bool
abstract Crucible.Mediator.Invocation.InvocationPipeline<TResponse>.ExecuteAndCaptureAsync(object! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext<TResponse>!>!
abstract Crucible.Mediator.Invocation.Strategies.RequestHandlerStrategy<TRequest, TResponse>.ExecuteAsync(Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Crucible.Mediator.Commands.CommandInvoker
Crucible.Mediator.Commands.CommandInvoker.CommandInvoker(Crucible.Mediator.Invocation.IInvocationPipelineProvider! pipelineProvider) -> void
Crucible.Mediator.Commands.CommandInvoker.InvokeAndCaptureAsync(Crucible.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext!>!
Crucible.Mediator.Commands.CommandInvoker.InvokeAsync(Crucible.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Crucible.Mediator.DependencyInjection.MediatorConfiguration
Crucible.Mediator.DependencyInjection.MediatorConfiguration.Debug.get -> bool
Crucible.Mediator.DependencyInjection.MediatorConfiguration.Debug.set -> void
Crucible.Mediator.DependencyInjection.MediatorConfiguration.MediatorConfiguration() -> void
Crucible.Mediator.DependencyInjection.MediatorDiBuilder
Crucible.Mediator.DependencyInjection.MediatorDiBuilder.Command<TRequest>() -> Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, Crucible.Mediator.Commands.CommandResponse!>!
Crucible.Mediator.DependencyInjection.MediatorDiBuilder.Configure(System.Action<Crucible.Mediator.DependencyInjection.MediatorConfiguration!>! setup) -> Crucible.Mediator.DependencyInjection.MediatorDiBuilder!
Crucible.Mediator.DependencyInjection.MediatorDiBuilder.Event<TEvent>() -> Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>!
Crucible.Mediator.DependencyInjection.MediatorDiBuilder.Invocation<TRequest, TResponse>() -> Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TRequest, TResponse>!
Crucible.Mediator.DependencyInjection.MediatorDiBuilder.MediatorDiBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Crucible.Mediator.DependencyInjection.MediatorConfiguration!>? setup = null) -> void
Crucible.Mediator.DependencyInjection.MediatorDiBuilder.Request<TRequest, TResponse>() -> Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>!
Crucible.Mediator.DependencyInjection.MediatorDiBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.AddListener<THandler>() -> Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>!
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.AddMiddleware<TMiddleware>(int? order = null) -> Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>!
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.Command<TRequest>() -> Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, Crucible.Mediator.Commands.CommandResponse!>!
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.MediatorDiEventBuilder(Crucible.Mediator.DependencyInjection.MediatorDiBuilder! builder) -> void
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.PublishInParallel() -> Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>!
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.PublishSequentially() -> Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>!
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.Request<TRequest, TResponse>() -> Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>!
Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>.WithPublishStrategy<TStrategy>() -> Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>!
Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>
Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>.AddMiddleware<TMiddleware>(int? order = null) -> Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>!
Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>.Command<TRequest>() -> Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, Crucible.Mediator.Commands.CommandResponse!>!
Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>.Event<TEvent>() -> Crucible.Mediator.DependencyInjection.MediatorDiEventBuilder<TEvent>!
Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>.Invocation<TRequest, TResponse>() -> Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TRequest, TResponse>!
Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>.MediatorDiInvocationBuilder(Crucible.Mediator.DependencyInjection.MediatorDiBuilder! builder) -> void
Crucible.Mediator.DependencyInjection.MediatorDiInvocationBuilder<TInvocationRequest, TInvocationResponse>.Request<TRequest, TResponse>() -> Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>!
Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>
Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>.AddMiddleware<TMiddleware>(int? order = null) -> Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>!
Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>.HandleWith(Crucible.Mediator.Requests.IRequestHandler<TRequest, TResponse>! handler) -> Crucible.Mediator.DependencyInjection.MediatorDiBuilder!
Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>.HandleWith<THandler>() -> Crucible.Mediator.DependencyInjection.MediatorDiBuilder!
Crucible.Mediator.DependencyInjection.MediatorDiRequestBuilder<TRequest, TResponse>.MediatorDiRequestBuilder(Crucible.Mediator.DependencyInjection.MediatorDiBuilder! builder) -> void
Crucible.Mediator.Invocation.Accessors.IInvocationComponentAccessor<TComponent>
Crucible.Mediator.Invocation.Accessors.IInvocationComponentAccessor<TComponent>.GetComponent() -> TComponent
Crucible.Mediator.Invocation.Accessors.InvocationComponentAccessor<TComponent>
Crucible.Mediator.Invocation.Accessors.InvocationComponentAccessor<TComponent>.GetComponent() -> TComponent
Crucible.Mediator.Invocation.Accessors.InvocationComponentAccessor<TComponent>.InvocationComponentAccessor(System.Func<TComponent>! componentFactory) -> void
Crucible.Mediator.Invocation.Accessors.LazyInvocationComponentAccessor<TComponent>
Crucible.Mediator.Invocation.Accessors.LazyInvocationComponentAccessor<TComponent>.GetComponent() -> TComponent
Crucible.Mediator.Invocation.Accessors.LazyInvocationComponentAccessor<TComponent>.LazyInvocationComponentAccessor(System.Lazy<TComponent>! componentInitializer) -> void
Crucible.Mediator.Invocation.Accessors.SingletonInvocationComponentAccessor<TComponent>
Crucible.Mediator.Invocation.Accessors.SingletonInvocationComponentAccessor<TComponent>.GetComponent() -> TComponent
Crucible.Mediator.Invocation.Accessors.SingletonInvocationComponentAccessor<TComponent>.SingletonInvocationComponentAccessor(TComponent component) -> void
Crucible.Mediator.Invocation.IInvocationContextFactory
Crucible.Mediator.Invocation.IInvocationContextFactory.CreateContextForRequest<TRequest, TResponse>(object! request) -> Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>!
Crucible.Mediator.Invocation.IInvocationMiddlewareProvider
Crucible.Mediator.Invocation.IInvocationMiddlewareProvider.GetMiddlewaresForContext<TRequest, TResponse>() -> System.Collections.Generic.IReadOnlyList<Crucible.Mediator.Invocation.InvocationMiddlewareWrapper!>!
Crucible.Mediator.Invocation.IInvocationPipelineProvider
Crucible.Mediator.Invocation.IInvocationPipelineProvider.GetInvocationPipeline<TResponse>(object! request) -> Crucible.Mediator.Invocation.InvocationPipeline<TResponse>!
Crucible.Mediator.Invocation.InvocationContext
Crucible.Mediator.Invocation.InvocationContext.Error.get -> System.Exception?
Crucible.Mediator.Invocation.InvocationContext.HasError.get -> bool
Crucible.Mediator.Invocation.InvocationContext.HasResponse.get -> bool
Crucible.Mediator.Invocation.InvocationContext.HasResponseType.get -> bool
Crucible.Mediator.Invocation.InvocationContext.InvocationContext(object! request) -> void
Crucible.Mediator.Invocation.InvocationContext.IsEvent.get -> bool
Crucible.Mediator.Invocation.InvocationContext.IsEvent.set -> void
Crucible.Mediator.Invocation.InvocationContext.IsSuccess.get -> bool
Crucible.Mediator.Invocation.InvocationContext.Request.get -> object!
Crucible.Mediator.Invocation.InvocationContext.Response.get -> object?
Crucible.Mediator.Invocation.InvocationContext.SetError(System.Exception? error) -> void
Crucible.Mediator.Invocation.InvocationContext.SetResponse(object? response) -> void
Crucible.Mediator.Invocation.InvocationContext<TRequest, TResponse>
Crucible.Mediator.Invocation.InvocationContext<TRequest, TResponse>.InvocationContext(TRequest request) -> void
Crucible.Mediator.Invocation.InvocationContextFactory
Crucible.Mediator.Invocation.InvocationContextFactory.CreateContextForRequest<TRequest, TResponse>(object! request) -> Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>!
Crucible.Mediator.Invocation.InvocationContextFactory.InvocationContextFactory() -> void
Crucible.Mediator.Invocation.InvocationMiddlewareProvider
Crucible.Mediator.Invocation.InvocationMiddlewareProvider.GetMiddlewaresForContext<TRequest, TResponse>() -> System.Collections.Generic.IReadOnlyList<Crucible.Mediator.Invocation.InvocationMiddlewareWrapper!>!
Crucible.Mediator.Invocation.InvocationMiddlewareProvider.InvocationMiddlewareProvider(System.IServiceProvider! services) -> void
Crucible.Mediator.Invocation.InvocationMiddlewareWrapper
Crucible.Mediator.Invocation.InvocationMiddlewareWrapper.InvocationMiddlewareWrapper(int order) -> void
Crucible.Mediator.Invocation.InvocationMiddlewareWrapper.Order.get -> int
Crucible.Mediator.Invocation.InvocationMiddlewareWrapper<TRequest, TResponse>
Crucible.Mediator.Invocation.InvocationMiddlewareWrapper<TRequest, TResponse>.InvocationMiddlewareWrapper(int order, Crucible.Mediator.Invocation.Accessors.IInvocationComponentAccessor<Crucible.Mediator.Invocation.IInvocationMiddleware<TRequest, TResponse>!>! middlewareAccessor) -> void
Crucible.Mediator.Invocation.InvocationPipeline<TRequest, TResponse>
Crucible.Mediator.Invocation.InvocationPipeline<TRequest, TResponse>.InvocationPipeline(Crucible.Mediator.Invocation.IInvocationContextFactory! contextFactory, Crucible.Mediator.Invocation.IInvocationMiddlewareProvider! middlewareProvider, Crucible.Mediator.Invocation.Strategies.IRequestHandlerStrategy<TRequest, TResponse>! strategy) -> void
Crucible.Mediator.Invocation.InvocationPipeline<TResponse>
Crucible.Mediator.Invocation.InvocationPipeline<TResponse>.InvocationPipeline() -> void
Crucible.Mediator.Invocation.InvocationPipelineProvider
Crucible.Mediator.Invocation.InvocationPipelineProvider.InvocationPipelineProvider(System.IServiceProvider! serviceProvider) -> void
Crucible.Mediator.Invocation.InvocationPipelineProvider.ServiceProvider.get -> System.IServiceProvider!
Crucible.Mediator.Invocation.Invoker
Crucible.Mediator.Invocation.Invoker.HandleAndCaptureAsync<TResponse>(object! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext<TResponse>!>!
Crucible.Mediator.Invocation.Invoker.HandleAsync<TResponse>(object! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Crucible.Mediator.Invocation.Invoker.Invoker(Crucible.Mediator.Invocation.IInvocationPipelineProvider! pipelineProvider) -> void
Crucible.Mediator.Invocation.Strategies.IRequestHandlerStrategy<TRequest, TResponse>
Crucible.Mediator.Invocation.Strategies.IRequestHandlerStrategy<TRequest, TResponse>.ExecuteAsync(Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Crucible.Mediator.Invocation.Strategies.IRequestHandlerStrategyProvider
Crucible.Mediator.Invocation.Strategies.IRequestHandlerStrategyProvider.GetRequestHandlerStrategyForContext<TRequest, TResponse>(Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context) -> Crucible.Mediator.Invocation.Strategies.IRequestHandlerStrategy<TRequest, TResponse>!
Crucible.Mediator.Invocation.Strategies.ParallelMultiRequestHandlerStrategy<TRequest, TResponse>
Crucible.Mediator.Invocation.Strategies.ParallelMultiRequestHandlerStrategy<TRequest, TResponse>.ParallelMultiRequestHandlerStrategy(System.Collections.Generic.IEnumerable<Crucible.Mediator.Invocation.Accessors.IInvocationComponentAccessor<Crucible.Mediator.Requests.IRequestHandler<TRequest, TResponse>!>!>! handlersAccessor) -> void
Crucible.Mediator.Invocation.Strategies.RequestHandlerStrategy<TRequest, TResponse>
Crucible.Mediator.Invocation.Strategies.RequestHandlerStrategy<TRequest, TResponse>.ExecuteHandlerAsync(Crucible.Mediator.Requests.IRequestHandler<TRequest, TResponse>! handler, Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Crucible.Mediator.Invocation.Strategies.RequestHandlerStrategy<TRequest, TResponse>.RequestHandlerStrategy() -> void
Crucible.Mediator.Invocation.Strategies.RequestHandlerStrategyProvider
Crucible.Mediator.Invocation.Strategies.RequestHandlerStrategyProvider.GetRequestHandlerStrategyForContext<TRequest, TResponse>(Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context) -> Crucible.Mediator.Invocation.Strategies.IRequestHandlerStrategy<TRequest, TResponse>!
Crucible.Mediator.Invocation.Strategies.RequestHandlerStrategyProvider.RequestHandlerStrategyProvider(System.IServiceProvider! services) -> void
Crucible.Mediator.Invocation.Strategies.SequentialMultiRequestHandlerStrategy<TRequest, TResponse>
Crucible.Mediator.Invocation.Strategies.SequentialMultiRequestHandlerStrategy<TRequest, TResponse>.SequentialMultiRequestHandlerStrategy(System.Collections.Generic.IEnumerable<Crucible.Mediator.Invocation.Accessors.IInvocationComponentAccessor<Crucible.Mediator.Requests.IRequestHandler<TRequest, TResponse>!>!>! handlersAccessor) -> void
Crucible.Mediator.Invocation.Strategies.SingleRequestHandlerStrategy<TRequest, TResponse>
Crucible.Mediator.Invocation.Strategies.SingleRequestHandlerStrategy<TRequest, TResponse>.SingleRequestHandlerStrategy(Crucible.Mediator.Invocation.Accessors.IInvocationComponentAccessor<Crucible.Mediator.Requests.IRequestHandler<TRequest, TResponse>!>! handlerAccessor) -> void
Crucible.Mediator.Mediator
Crucible.Mediator.Mediator.ExecuteAndCaptureAsync<TResponse>(Crucible.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext<TResponse>!>!
Crucible.Mediator.Mediator.ExecuteAsync<TResponse>(Crucible.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Crucible.Mediator.Mediator.InvokeAndCaptureAsync(Crucible.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext!>!
Crucible.Mediator.Mediator.InvokeAsync(Crucible.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Crucible.Mediator.Mediator.Mediator(Crucible.Mediator.Invocation.IInvocationPipelineProvider! invocationPipelineProvider, Crucible.Mediator.Commands.ICommandInvoker! commandInvoker, Crucible.Mediator.Requests.IRequestExecutor! requestInvoker, Crucible.Mediator.Events.IEventPublisher! eventPublisher) -> void
Crucible.Mediator.Mediator.PublishAndCaptureAsync(Crucible.Mediator.Events.IEvent! event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext!>!
Crucible.Mediator.Mediator.PublishAsync(Crucible.Mediator.Events.IEvent! event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Crucible.Mediator.Requests.RequestInvoker
Crucible.Mediator.Requests.RequestInvoker.ExecuteAndCaptureAsync<TResponse>(Crucible.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext<TResponse>!>!
Crucible.Mediator.Requests.RequestInvoker.ExecuteAsync<TResponse>(Crucible.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Crucible.Mediator.Requests.RequestInvoker.RequestInvoker(Crucible.Mediator.Invocation.IInvocationPipelineProvider! pipelineProvider) -> void
Microsoft.Extensions.DependencyInjection.MediatorDiExtensions
override Crucible.Mediator.Invocation.InvocationContext<TRequest, TResponse>.RequestType.get -> System.Type!
override Crucible.Mediator.Invocation.InvocationContext<TRequest, TResponse>.ResponseType.get -> System.Type!
override Crucible.Mediator.Invocation.InvocationMiddlewareWrapper<TRequest, TResponse>.ExecuteAsync(Crucible.Mediator.Invocation.IInvocationContext! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Crucible.Mediator.Invocation.InvocationMiddlewareWrapper<TRequest, TResponse>.IsApplicable(System.Type! contextType) -> bool
override Crucible.Mediator.Invocation.InvocationPipeline<TRequest, TResponse>.ExecuteAndCaptureAsync(object! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Crucible.Mediator.Invocation.IInvocationContext<TResponse>!>!
override Crucible.Mediator.Invocation.Strategies.ParallelMultiRequestHandlerStrategy<TRequest, TResponse>.ExecuteAsync(Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Crucible.Mediator.Invocation.Strategies.SequentialMultiRequestHandlerStrategy<TRequest, TResponse>.ExecuteAsync(Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Crucible.Mediator.Invocation.Strategies.SingleRequestHandlerStrategy<TRequest, TResponse>.ExecuteAsync(Crucible.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static Crucible.Mediator.Invocation.Invoker.ThrowIfContextHasError(Crucible.Mediator.Invocation.IInvocationContext! context) -> void
static Crucible.Mediator.Invocation.Invoker.ThrowIfContextHasErrorOrReturnResponse<TResponse>(Crucible.Mediator.Invocation.IInvocationContext<TResponse>! context) -> TResponse
static Microsoft.Extensions.DependencyInjection.MediatorDiExtensions.AddMediator(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Crucible.Mediator.DependencyInjection.MediatorConfiguration!>? setup = null) -> Crucible.Mediator.DependencyInjection.MediatorDiBuilder!
virtual Crucible.Mediator.Invocation.InvocationPipelineProvider.GetInvocationPipeline<TResponse>(object! request) -> Crucible.Mediator.Invocation.InvocationPipeline<TResponse>!
