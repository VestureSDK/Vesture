// <auto-generated/>
#nullable enable

namespace Ingot.Mediator.Engine.Pipeline.Extensions
{
    partial class MediatorLoggerExtensions
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Collections.Generic.IEnumerable<global::System.String>, global::System.Exception?> __InnerInvocationPipelineCompiledCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Collections.Generic.IEnumerable<global::System.String>>(global::Microsoft.Extensions.Logging.LogLevel.Trace, new global::Microsoft.Extensions.Logging.EventId(10001, "InvocationPipelinesCached"), "Invocation pipelines cached {Pipelines}", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvocationPipelineCompiled(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Collections.Generic.IEnumerable<global::System.String> pipelines)
        {
            __InnerInvocationPipelineCompiledCallback(logger, pipelines, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Type, global::System.Type, global::System.Object, global::System.Exception?> __InnerInvocationPipelineFoundCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Type, global::System.Type, global::System.Object>(global::Microsoft.Extensions.Logging.LogLevel.Debug, new global::Microsoft.Extensions.Logging.EventId(10002, "InvocationPipelineFound"), "Invocation pipeline found ({RequestType} -> {ResponseType}) for contract {Contract}", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvocationPipelineFound(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Type requestType, global::System.Type responseType, global::System.Object contract)
        {
            __InnerInvocationPipelineFoundCallback(logger, requestType, responseType, contract, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Type, global::System.Type, global::System.Object, global::System.Exception?> __InnerInvocationPipelineNotFoundCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Type, global::System.Type, global::System.Object>(global::Microsoft.Extensions.Logging.LogLevel.Debug, new global::Microsoft.Extensions.Logging.EventId(10003, "InvocationPipelineNotFound"), "Invocation pipeline not found ({RequestType} -> {ResponseType}) for contract {Contract}; Falling back to NoOp invocation pipeline", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvocationPipelineNotFound(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Type requestType, global::System.Type responseType, global::System.Object contract)
        {
            __InnerInvocationPipelineNotFoundCallback(logger, requestType, responseType, contract, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Type, global::System.Type, global::System.Type, global::System.Int32, global::System.Exception?> __InnerInvocationPipelineChainMiddlewareMatchesCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Type, global::System.Type, global::System.Type, global::System.Int32>(global::Microsoft.Extensions.Logging.LogLevel.Trace, new global::Microsoft.Extensions.Logging.EventId(10004, "InvocationPipelineNotFound"), "{MiddlewareType} matches ({RequestType} -> {ResponseType}) and will be added to the invocation pipeline chain at index {MiddlewareIndex}", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvocationPipelineChainMiddlewareMatches(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Type middlewareType, global::System.Type requestType, global::System.Type responseType, global::System.Int32 middlewareIndex)
        {
            __InnerInvocationPipelineChainMiddlewareMatchesCallback(logger, middlewareType, requestType, responseType, middlewareIndex, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Type, global::System.Type, global::System.Type, global::System.Exception?> __InnerInvocationPipelineChainMiddlewareDoesNotMatchCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Type, global::System.Type, global::System.Type>(global::Microsoft.Extensions.Logging.LogLevel.Trace, new global::Microsoft.Extensions.Logging.EventId(10005, "InvocationPipelineChainMiddlewareDoesNotMatch"), "{MiddlewareType} does not match ({RequestType} -> {ResponseType}) and will not be added to the invocation pipeline chain", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvocationPipelineChainMiddlewareDoesNotMatch(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Type middlewareType, global::System.Type requestType, global::System.Type responseType)
        {
            __InnerInvocationPipelineChainMiddlewareDoesNotMatchCallback(logger, middlewareType, requestType, responseType, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Type, global::System.Type, global::System.Int32, global::System.Collections.Generic.IEnumerable<global::System.Type>, global::System.Exception?> __InnerInvocationPipelineChainCreatedCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Type, global::System.Type, global::System.Int32, global::System.Collections.Generic.IEnumerable<global::System.Type>>(global::Microsoft.Extensions.Logging.LogLevel.Trace, new global::Microsoft.Extensions.Logging.EventId(10006, "InvocationPipelineChainCreated"), "Invocation pipeline chain ({RequestType} -> {ResponseType}) created with {MiddlewareCount} middlewares {Middlewares}", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvocationPipelineChainCreated(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Type requestType, global::System.Type responseType, global::System.Int32 middlewareCount, global::System.Collections.Generic.IEnumerable<global::System.Type> middlewares)
        {
            __InnerInvocationPipelineChainCreatedCallback(logger, requestType, responseType, middlewareCount, middlewares, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Type, global::System.Type?, global::System.Exception?> __InnerPrePipelineAndHandlerMiddlewareUnhandledExceptionCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Type, global::System.Type?>(global::Microsoft.Extensions.Logging.LogLevel.Debug, new global::Microsoft.Extensions.Logging.EventId(10007, "PrePipelineAndHandlerMiddlewareUnhandledException"), "Invocation pipeline chain ({RequestType} -> {ResponseType}) encountered an unhandled exception; an error has been added to the current invocation context", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerPrePipelineAndHandlerMiddlewareUnhandledException(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Type requestType, global::System.Type? responseType)
        {
            __InnerPrePipelineAndHandlerMiddlewareUnhandledExceptionCallback(logger, requestType, responseType, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Type, global::System.Type?, global::System.Exception?> __InnerNoHandlersRegisteredExceptionCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Type, global::System.Type?>(global::Microsoft.Extensions.Logging.LogLevel.Debug, new global::Microsoft.Extensions.Logging.EventId(10008, "NoHandlersRegisteredException"), "Invocation pipeline chain ({RequestType} -> {ResponseType}) does not have the required handler; an error has been added to the current invocation context", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerNoHandlersRegisteredException(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Type requestType, global::System.Type? responseType)
        {
            __InnerNoHandlersRegisteredExceptionCallback(logger, requestType, responseType, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Object, global::System.Type, global::System.Type?, global::System.Exception?> __InnerInvokingHandlerCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Object, global::System.Type, global::System.Type?>(global::Microsoft.Extensions.Logging.LogLevel.Debug, new global::Microsoft.Extensions.Logging.EventId(10009, "InvokingHandler"), "Invoking {Handler} ({RequestType} -> {ResponseType})", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvokingHandler(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Object handler, global::System.Type requestType, global::System.Type? responseType)
        {
            __InnerInvokingHandlerCallback(logger, handler, requestType, responseType, ex);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Object, global::System.Type, global::System.Type?, global::System.Exception?> __InnerInvokedHandlerCallback =
            global::Microsoft.Extensions.Logging.LoggerMessage.Define<global::System.Object, global::System.Type, global::System.Type?>(global::Microsoft.Extensions.Logging.LogLevel.Trace, new global::Microsoft.Extensions.Logging.EventId(10010, "InvokedHandler"), "Invoked {Handler} ({RequestType} -> {ResponseType}); response has been set into the current invocation context", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); 

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "9.0.11.11010")]
        private static partial void InnerInvokedHandler(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.Exception ex, global::System.Object handler, global::System.Type requestType, global::System.Type? responseType)
        {
            __InnerInvokedHandlerCallback(logger, handler, requestType, responseType, ex);
        }
    }
}