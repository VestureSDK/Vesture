#nullable enable
abstract Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.RequestType.get -> System.Type!
abstract Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.ResponseType.get -> System.Type!
Ingot.Mediator.Engine.DefaultMediator
Ingot.Mediator.Engine.DefaultMediator.DefaultMediator(System.Collections.Generic.IEnumerable<Ingot.Mediator.Engine.Pipeline.IInvocationPipeline!>! invocationPipelines, Ingot.Mediator.Engine.Pipeline.Context.IInvocationContextFactory! contextFactory, Ingot.Mediator.Engine.Pipeline.Internal.NoOp.INoOpInvocationPipelineResolver! noOpInvocationPipelineResolver) -> void
Ingot.Mediator.Engine.DefaultMediator.ExecuteAndCaptureAsync<TResponse>(Ingot.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext<TResponse>!>!
Ingot.Mediator.Engine.DefaultMediator.ExecuteAsync<TResponse>(Ingot.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Ingot.Mediator.Engine.DefaultMediator.HandleAndCaptureAsync<TResponse>(object! contract, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext<TResponse>!>!
Ingot.Mediator.Engine.DefaultMediator.HandleAsync<TResponse>(object! contract, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Ingot.Mediator.Engine.DefaultMediator.InvokeAndCaptureAsync(Ingot.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext!>!
Ingot.Mediator.Engine.DefaultMediator.InvokeAsync(Ingot.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Ingot.Mediator.Engine.DefaultMediator.PublishAndCaptureAsync(Ingot.Mediator.Events.IEvent! event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext!>!
Ingot.Mediator.Engine.DefaultMediator.PublishAsync(Ingot.Mediator.Events.IEvent! event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.AddError(System.Exception! error) -> void
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.DefaultInvocationContext(object! request) -> void
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.Error.get -> System.Exception?
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.HasError.get -> bool
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.HasResponse.get -> bool
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.HasResponseType.get -> bool
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.IsCommand.get -> bool
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.IsEvent.get -> bool
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.IsRequest.get -> bool
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.IsSuccess.get -> bool
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.Request.get -> object!
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.Response.get -> object?
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.SetError(System.Exception? error) -> void
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext.SetResponse(object? response) -> void
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext<TRequest, TResponse>.DefaultInvocationContext(TRequest request) -> void
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContextFactory
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContextFactory.CreateContextForRequest<TRequest, TResponse>(object! request) -> Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>!
Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContextFactory.DefaultInvocationContextFactory() -> void
Ingot.Mediator.Engine.Pipeline.Context.IInvocationContextFactory
Ingot.Mediator.Engine.Pipeline.Context.IInvocationContextFactory.CreateContextForRequest<TRequest, TResponse>(object! request) -> Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>!
Ingot.Mediator.Engine.Pipeline.DefaultInvocationPipeline<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.DefaultInvocationPipeline<TRequest, TResponse>.DefaultInvocationPipeline(Ingot.Mediator.Engine.Pipeline.Context.IInvocationContextFactory! contextFactory, Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Engine.Pipeline.IPrePipelineMiddleware!>! preInvocationPipelineMiddlewareResolver, System.Collections.Generic.IEnumerable<Ingot.Mediator.Engine.Pipeline.Internal.IMiddlewareInvocationPipelineItem!>! middlewares, Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Engine.Pipeline.IPreHandlerMiddleware!>! preHandlerMiddlewareResolver, Ingot.Mediator.Engine.Pipeline.Strategies.IInvocationHandlerStrategy<TRequest, TResponse>! handlerStrategy) -> void
Ingot.Mediator.Engine.Pipeline.DefaultInvocationPipeline<TRequest, TResponse>.HandleAsync(object! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext<TResponse>!>!
Ingot.Mediator.Engine.Pipeline.DefaultInvocationPipeline<TRequest, TResponse>.RequestType.get -> System.Type!
Ingot.Mediator.Engine.Pipeline.DefaultInvocationPipeline<TRequest, TResponse>.ResponseType.get -> System.Type!
Ingot.Mediator.Engine.Pipeline.IInvocationPipeline
Ingot.Mediator.Engine.Pipeline.IInvocationPipeline.RequestType.get -> System.Type!
Ingot.Mediator.Engine.Pipeline.IInvocationPipeline.ResponseType.get -> System.Type!
Ingot.Mediator.Engine.Pipeline.IInvocationPipeline<TResponse>
Ingot.Mediator.Engine.Pipeline.IInvocationPipeline<TResponse>.HandleAsync(object! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext<TResponse>!>!
Ingot.Mediator.Engine.Pipeline.Internal.DefaultMiddlewareInvocationPipelineItem<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.Internal.DefaultMiddlewareInvocationPipelineItem<TRequest, TResponse>.DefaultMiddlewareInvocationPipelineItem(int order, Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Invocation.IInvocationMiddleware<TRequest, TResponse>!>! resolver) -> void
Ingot.Mediator.Engine.Pipeline.Internal.DefaultMiddlewareInvocationPipelineItem<TRequest, TResponse>.HandleAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Ingot.Mediator.Engine.Pipeline.Internal.DefaultMiddlewareInvocationPipelineItem<TRequest, TResponse>.IsApplicable(System.Type! contextType) -> bool
Ingot.Mediator.Engine.Pipeline.Internal.DefaultMiddlewareInvocationPipelineItem<TRequest, TResponse>.Order.get -> int
Ingot.Mediator.Engine.Pipeline.Internal.DefaultPrePipelineAndHandlerMiddleware
Ingot.Mediator.Engine.Pipeline.Internal.DefaultPrePipelineAndHandlerMiddleware.DefaultPrePipelineAndHandlerMiddleware() -> void
Ingot.Mediator.Engine.Pipeline.Internal.DefaultPrePipelineAndHandlerMiddleware.HandleAsync(Ingot.Mediator.Invocation.IInvocationContext<object!, object!>! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Ingot.Mediator.Engine.Pipeline.Internal.IMiddlewareInvocationPipelineItem
Ingot.Mediator.Engine.Pipeline.Internal.IMiddlewareInvocationPipelineItem.IsApplicable(System.Type! contextType) -> bool
Ingot.Mediator.Engine.Pipeline.Internal.IMiddlewareInvocationPipelineItem.Order.get -> int
Ingot.Mediator.Engine.Pipeline.Internal.IMiddlewareInvocationPipelineItem<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.DefaultNoOpInvocationHandlerStrategyResolver
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.DefaultNoOpInvocationHandlerStrategyResolver.DefaultNoOpInvocationHandlerStrategyResolver() -> void
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.DefaultNoOpInvocationHandlerStrategyResolver.ResolveNoOpInvocationHandlerStrategy<TResponse>() -> Ingot.Mediator.Engine.Pipeline.Strategies.IInvocationHandlerStrategy<object!, TResponse>!
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.DefaultNoOpInvocationPipelineResolver
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.DefaultNoOpInvocationPipelineResolver.DefaultNoOpInvocationPipelineResolver(Ingot.Mediator.Engine.Pipeline.Context.IInvocationContextFactory! contextFactory, Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Engine.Pipeline.IPrePipelineMiddleware!>! preInvocationPipelineMiddlewareResolver, System.Collections.Generic.IEnumerable<Ingot.Mediator.Engine.Pipeline.Internal.IMiddlewareInvocationPipelineItem!>! middlewares, Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Engine.Pipeline.IPreHandlerMiddleware!>! preHandlerMiddlewareResolver, Ingot.Mediator.Engine.Pipeline.Internal.NoOp.INoOpInvocationHandlerStrategyResolver! handlerStrategyResolver) -> void
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.DefaultNoOpInvocationPipelineResolver.ResolveNoOpInvocationPipeline<TResponse>() -> Ingot.Mediator.Engine.Pipeline.IInvocationPipeline<TResponse>!
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.INoOpInvocationHandlerStrategyResolver
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.INoOpInvocationHandlerStrategyResolver.ResolveNoOpInvocationHandlerStrategy<TResponse>() -> Ingot.Mediator.Engine.Pipeline.Strategies.IInvocationHandlerStrategy<object!, TResponse>!
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.INoOpInvocationPipelineResolver
Ingot.Mediator.Engine.Pipeline.Internal.NoOp.INoOpInvocationPipelineResolver.ResolveNoOpInvocationPipeline<TResponse>() -> Ingot.Mediator.Engine.Pipeline.IInvocationPipeline<TResponse>!
Ingot.Mediator.Engine.Pipeline.IPreHandlerMiddleware
Ingot.Mediator.Engine.Pipeline.IPrePipelineMiddleware
Ingot.Mediator.Engine.Pipeline.Resolvers.DeferredSingletonInvocationComponentResolver<TComponent>
Ingot.Mediator.Engine.Pipeline.Resolvers.DeferredSingletonInvocationComponentResolver<TComponent>.DeferredSingletonInvocationComponentResolver(System.Lazy<TComponent>! componentInitializer) -> void
Ingot.Mediator.Engine.Pipeline.Resolvers.DeferredSingletonInvocationComponentResolver<TComponent>.ResolveComponent() -> TComponent
Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<TComponent>
Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<TComponent>.ResolveComponent() -> TComponent
Ingot.Mediator.Engine.Pipeline.Resolvers.SingletonInvocationComponentResolver<TComponent>
Ingot.Mediator.Engine.Pipeline.Resolvers.SingletonInvocationComponentResolver<TComponent>.ResolveComponent() -> TComponent
Ingot.Mediator.Engine.Pipeline.Resolvers.SingletonInvocationComponentResolver<TComponent>.SingletonInvocationComponentResolver(TComponent component) -> void
Ingot.Mediator.Engine.Pipeline.Resolvers.TransientInvocationComponentResolver<TComponent>
Ingot.Mediator.Engine.Pipeline.Resolvers.TransientInvocationComponentResolver<TComponent>.ResolveComponent() -> TComponent
Ingot.Mediator.Engine.Pipeline.Resolvers.TransientInvocationComponentResolver<TComponent>.TransientInvocationComponentResolver(System.Func<TComponent>! componentFactory) -> void
Ingot.Mediator.Engine.Pipeline.Strategies.IInvocationHandlerStrategy<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.Strategies.ParallelHandlersStrategy<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.Strategies.ParallelHandlersStrategy<TRequest, TResponse>.HandleAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Ingot.Mediator.Engine.Pipeline.Strategies.ParallelHandlersStrategy<TRequest, TResponse>.ParallelHandlersStrategy(System.Collections.Generic.IEnumerable<Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Invocation.IInvocationHandler<TRequest, TResponse>!>!>! resolvers) -> void
Ingot.Mediator.Engine.Pipeline.Strategies.SequentialHandlersStrategy<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.Strategies.SequentialHandlersStrategy<TRequest, TResponse>.HandleAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Ingot.Mediator.Engine.Pipeline.Strategies.SequentialHandlersStrategy<TRequest, TResponse>.SequentialHandlersStrategy(System.Collections.Generic.IEnumerable<Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Invocation.IInvocationHandler<TRequest, TResponse>!>!>! resolvers) -> void
Ingot.Mediator.Engine.Pipeline.Strategies.SingleHandlerStrategy<TRequest, TResponse>
Ingot.Mediator.Engine.Pipeline.Strategies.SingleHandlerStrategy<TRequest, TResponse>.HandleAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Ingot.Mediator.Engine.Pipeline.Strategies.SingleHandlerStrategy<TRequest, TResponse>.SingleHandlerStrategy(Ingot.Mediator.Engine.Pipeline.Resolvers.IInvocationComponentResolver<Ingot.Mediator.Invocation.IInvocationHandler<TRequest, TResponse>!>! resolver) -> void
override Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext<TRequest, TResponse>.RequestType.get -> System.Type!
override Ingot.Mediator.Engine.Pipeline.Context.DefaultInvocationContext<TRequest, TResponse>.ResponseType.get -> System.Type!
static readonly Ingot.Mediator.Engine.Pipeline.Internal.DefaultPrePipelineAndHandlerMiddleware.Instance -> Ingot.Mediator.Engine.Pipeline.Internal.DefaultPrePipelineAndHandlerMiddleware!
