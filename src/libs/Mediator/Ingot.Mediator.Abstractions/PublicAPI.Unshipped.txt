#nullable enable
abstract Ingot.Mediator.Commands.CommandHandler<TCommand>.HandleAsync(TCommand command, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
abstract Ingot.Mediator.Events.EventHandler<TEvent>.HandleAsync(TEvent event, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
abstract Ingot.Mediator.Requests.RequestHandler<TRequest, TResponse>.HandleAsync(TRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Ingot.Mediator.Commands.CommandHandler<TCommand>
Ingot.Mediator.Commands.CommandHandler<TCommand>.CommandHandler() -> void
Ingot.Mediator.Commands.CommandResponse
Ingot.Mediator.Commands.CommandResponse.CommandResponse() -> void
Ingot.Mediator.Commands.ICommandHandler<TCommand>
Ingot.Mediator.Events.EventHandler<TEvent>
Ingot.Mediator.Events.EventHandler<TEvent>.EventHandler() -> void
Ingot.Mediator.Events.EventResponse
Ingot.Mediator.Events.EventResponse.EventResponse() -> void
Ingot.Mediator.Events.IEventHandler<TEvent>
Ingot.Mediator.IMediator
Ingot.Mediator.IMediator.ExecuteAndCaptureAsync<TResponse>(Ingot.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext<TResponse>!>!
Ingot.Mediator.IMediator.ExecuteAsync<TResponse>(Ingot.Mediator.Requests.IRequest<TResponse>! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Ingot.Mediator.IMediator.HandleAndCaptureAsync<TResponse>(object! contract, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext<TResponse>!>!
Ingot.Mediator.IMediator.HandleAsync<TResponse>(object! contract, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Ingot.Mediator.IMediator.InvokeAndCaptureAsync(Ingot.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext!>!
Ingot.Mediator.IMediator.InvokeAsync(Ingot.Mediator.Commands.ICommand! command, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Ingot.Mediator.IMediator.PublishAndCaptureAsync(Ingot.Mediator.Events.IEvent! event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Ingot.Mediator.Invocation.IInvocationContext!>!
Ingot.Mediator.IMediator.PublishAsync(Ingot.Mediator.Events.IEvent! event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Ingot.Mediator.Invocation.IInvocationContext
Ingot.Mediator.Invocation.IInvocationContext.AddError(System.Exception! error) -> void
Ingot.Mediator.Invocation.IInvocationContext.Error.get -> System.Exception?
Ingot.Mediator.Invocation.IInvocationContext.HasError.get -> bool
Ingot.Mediator.Invocation.IInvocationContext.HasResponse.get -> bool
Ingot.Mediator.Invocation.IInvocationContext.HasResponseType.get -> bool
Ingot.Mediator.Invocation.IInvocationContext.IsCommand.get -> bool
Ingot.Mediator.Invocation.IInvocationContext.IsEvent.get -> bool
Ingot.Mediator.Invocation.IInvocationContext.IsRequest.get -> bool
Ingot.Mediator.Invocation.IInvocationContext.IsSuccess.get -> bool
Ingot.Mediator.Invocation.IInvocationContext.Request.get -> object!
Ingot.Mediator.Invocation.IInvocationContext.RequestType.get -> System.Type!
Ingot.Mediator.Invocation.IInvocationContext.Response.get -> object?
Ingot.Mediator.Invocation.IInvocationContext.ResponseType.get -> System.Type?
Ingot.Mediator.Invocation.IInvocationContext.SetError(System.Exception? error) -> void
Ingot.Mediator.Invocation.IInvocationContext.SetResponse(object? response) -> void
Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>
Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>.Request.get -> TRequest
Ingot.Mediator.Invocation.IInvocationContext<TResponse>
Ingot.Mediator.Invocation.IInvocationContext<TResponse>.Response.get -> TResponse?
Ingot.Mediator.Invocation.IInvocationHandler<TRequest, TResponse>
Ingot.Mediator.Invocation.IInvocationHandler<TRequest, TResponse>.HandleAsync(TRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResponse>!
Ingot.Mediator.Invocation.IInvocationMiddleware<TRequest, TResponse>
Ingot.Mediator.Invocation.IInvocationMiddleware<TRequest, TResponse>.HandleAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Ingot.Mediator.Invocation.InvocationContextExtensions
Ingot.Mediator.Invocation.InvocationMiddleware<TRequest, TResponse>
Ingot.Mediator.Invocation.InvocationMiddleware<TRequest, TResponse>.InvocationMiddleware() -> void
Ingot.Mediator.Invocation.NoResponse
Ingot.Mediator.Invocation.NoResponse.NoResponse() -> void
Ingot.Mediator.Requests.IRequestHandler<TRequest, TResponse>
Ingot.Mediator.Requests.RequestHandler<TRequest, TResponse>
Ingot.Mediator.Requests.RequestHandler<TRequest, TResponse>.RequestHandler() -> void
static Ingot.Mediator.Invocation.InvocationContextExtensions.GetResponseOrDefault<TResponse>(this Ingot.Mediator.Invocation.IInvocationContext! context) -> TResponse
static Ingot.Mediator.Invocation.InvocationContextExtensions.ThrowIfHasError<TContext>(this TContext context) -> TContext
static readonly Ingot.Mediator.Commands.CommandResponse.Type -> System.Type!
static readonly Ingot.Mediator.Events.EventResponse.Type -> System.Type!
static readonly Ingot.Mediator.Invocation.NoResponse.Type -> System.Type!
virtual Ingot.Mediator.Invocation.InvocationMiddleware<TRequest, TResponse>.HandleAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! next, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual Ingot.Mediator.Invocation.InvocationMiddleware<TRequest, TResponse>.OnAfterNextAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual Ingot.Mediator.Invocation.InvocationMiddleware<TRequest, TResponse>.OnBeforeNextAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual Ingot.Mediator.Invocation.InvocationMiddleware<TRequest, TResponse>.OnErrorAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual Ingot.Mediator.Invocation.InvocationMiddleware<TRequest, TResponse>.OnSucessAsync(Ingot.Mediator.Invocation.IInvocationContext<TRequest, TResponse>! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
